from sage.all import *
from Crypto.Cipher import AES
from hashlib import sha256
import time

n=1161015060421173249378489750696141214060303995923395409949869627290702414711037093526198110777404654144671511905235970901959421941338918435310121680847960495861908297742489794351582662630349642895448557106366299469185588064602696326307097833183222618147069201840931225638628664922527925446087898861911362296363707119536526988582293048832383727953537307881230552636876712648271763176414090693303330350561279137776236795557842517619318238674985177929118712632535276039722205485150858981762083451832198822805690978929644453571222056709020149454001970560788598661970600271777421115525813743829030780059906217282681595452585004568419042410526300322447735538760602735954395278435630672731534059367618977970735807007280799837797901568012970516722520855615007870137859951477843419061096544616574048523021228941390127574301951810764886209442755752935524998421986069973124626502475162497047801043794416002937577783146899612599092388787
A=876856141867292541860323607264082069255499862749334652735605729433263443804539762724150146934351375350393080114923847779749893293139584686005392355141769986430382993358683972707818914126482354483753880940178023315634960922958253129075068286464920817560904484085316514309721680971508734869398801188634461566010739991385436551918949592308754421274535616460564680136888906568520377323715782357509089190820453332054156572172466552802449761288220780274972832498692580255837884665986978378035841349843031182334647618147782842049846153066181892449539407745486014499636387858777511312613142984882310305184710764200146570459723866686802492176613030166678729173421755638026624369502464133911152877741923335829863164896950580382969467402969579748979746430740394953571425965962087121649198611419063708096301382847206823372253864792103755888994838934565521982402277844450137390594607102522657031671082063652219166034186562490760814532579
B=287632227917624654212614562649343874383417428057330805237209169637026908557410569116739444108514384266685475678850601667911684150076525797991252031688869217089950247006850937786118259851817500044754131047963987707992467875713170336353659270924179467464836139578541900688370920519460119004845929450828524305499363274758459994420143563155593544731412056092492994042903315707705208959629847419957728142635524372296868834143016326096908127353866551528921319266146109788458033229140227479625927790051152685157231719361353398932500869549791514313894503151218196435978062246049426212499132086244127866741759522252412600587230711377821184153990120408229678096104763349842116878130234588134513252819344719559051734230776027339643260314327324982833200026332745447375624996928647322777183407239934048172826864244183355762705665502558087550433846102991894817404579682993484842986669591555105822532717319110007844731813526601115030730216
ct='fc8c67c8c451db0277fdc0b3ee6cd8e4d6584e00079a3326413450a1e816f4b463fa6e58148e25145cbdd0703847bc48'
hint=27232338411805533611504752479750933666365962695083952636081656664814520651947

pq = Integer(n).nth_root(3)
r = isqrt(pq)

def verify(x, shift):
    y = x ^ (hint >> shift)
    return x*y <= r>>(2*shift) < (x+1)*(y+1)

def get(x=1, shift=255):
    if not verify(x, shift):
        return
    if shift == 0:
        yield x
    else:
        yield from get(2*x, shift-1)
        yield from get(2*x+1, shift-1)

foo = sorted(set(max(i,i^hint) for i in get()))
print(f'There are {len(foo)} candidates to test')

for rq in foo:
    print(f'Testing {rq}')
    
    cops = [i for i in range(210) if gcd(i, 210) == 1]
    x = Zmod(pq)['x'].gen()
    origk = rq * (rq + 1) // 210 * 210
    eps = 0.0147
    
    @parallel
    def testfun(i):
        k = origk + i
        soln = (210*x+k).monic().small_roots(X=rq//210, beta=0.5, epsilon=eps)
        if soln:
            return int(soln[0]*210+k)
        
    t = time.time()
    result = [b for a,b in testfun(cops) if b]
    t = time.time() - t
    print(f'{t=}', result)
    
    if result:
        print('Prime factor found! Breaking early...')
        break
        
p = result[0]
assert 1 < p < pq
q = int(pq // p)
assert p * q == pq

####################################

def get_thingy(f):
    z = factor(f - 1, limit=2**24)[-1][0]
    F = GF(f)
    f3 = F(3)**z
    fA = F(A)**z
    order = (f-1)/z
    return discrete_log(fA, f3, order), order

pv, po = get_thingy(p)
qv, qo = get_thingy(q)
crt([pv,qv],[po,qo]), lcm(po, qo)

def solve_f_squared(f):
    k3 = pow(3, f-1, f**3)
    kA = pow(A, f-1, f**3)
    tmp3 = (k3 - 1) // f
    tmpA = (kA - 1) // f
    r = GF(f)(tmp3)
    D = int(tmpA / r)
    C = int(kA * pow(k3, -D, f**3) // (f*f) / r)
    return C * f + D

zp = solve_f_squared(p)
zq = solve_f_squared(q)
assert pow(3,(p-1)*zp,p**3) == pow(A, p-1, p**3)
assert pow(3,(q-1)*zq,q**3) == pow(A, q-1, q**3)
zp, zq

a = crt([pv,qv,zp,zq],[po,qo,p**2,q**2])
assert pow(3, a, n) == A

shared = pow(B, a, n)
key = sha256(str(shared).encode()).digest()
print(AES.new(key, AES.MODE_ECB).decrypt(bytes.fromhex(ct)))
