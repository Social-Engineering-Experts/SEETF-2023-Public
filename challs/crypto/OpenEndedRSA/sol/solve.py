from Crypto.Util.number import long_to_bytes
from gmpy2 import iroot

n = 102273879596517810990377282423472726027460443064683939304011542123196710774901060989067270532492298567093229128321692329740628450490799826352111218401958040398966213264648582167008910307308861267119229380385416523073063233676439205431787341959762456158735901628476769492808819670332459690695414384805355960329
e = 65537
c = 51295852362773645802164495088356504014656085673555383524516532497310520206771348899894261255951572784181072534252355368923583221684536838148556235818725495078521334113983852688551123368250626610738927980373728679163439512668552165205712876265795806444660262239275273091657848381708848495732343517789776957423
s = 128507372710876266809116441521071993373501360950301439928940005102517141449185048274058750442578112761334152960722557830781512085114879670147631965370048855192288440768620271468214898335819263102540763641617908275932788291551543955368740728922769245855304034817063220790250913667769787523374734049532482184053

# we know s is a prime.
# which means s must be odd.

# p is getPrime(512) which has to be odd, as there is no even 512-bit prime
# therefore p**2 is odd.
# s is odd, so s - p**2 must be even
# so pp**2 is even. So pp must be even
# but pp is prime. So pp is 2

p = iroot(s-4, 2)[0]
assert n % p == 0
q = n//p
phi = (p-1)*(q-1)
d = pow(e,-1,phi)
m = pow(c,d,n)
print(long_to_bytes(m))
#b'SEE{0dd_3vEN:deadbeef}'